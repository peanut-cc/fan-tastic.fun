<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rust on fan-tastic.fun</title><link>https://www.fan-tastic.fun/tags/rust/</link><description>Recent content in Rust on fan-tastic.fun</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>by fan-tastic.fun</copyright><lastBuildDate>Wed, 01 Feb 2023 14:29:37 +0800</lastBuildDate><atom:link href="https://www.fan-tastic.fun/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>《Zero To Production In Rust》笔记(一) ---- 开发前期准备</title><link>https://www.fan-tastic.fun/post/zero_to_product_in_rust_note1/</link><pubDate>Wed, 01 Feb 2023 14:29:37 +0800</pubDate><guid>https://www.fan-tastic.fun/post/zero_to_product_in_rust_note1/</guid><description>这本书和之前看过的一些书籍不一样，在最开始的部分，从开发流程到常用Rust小工具的说明都写的非常清楚，包括后面的CI持续集成。是可以通过书中</description></item><item><title>Rust trait和generic</title><link>https://www.fan-tastic.fun/post/rust_trait_and_generic/</link><pubDate>Sun, 06 Nov 2022 20:25:17 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_trait_and_generic/</guid><description>Trait 从多种数据类型中抽取出这些类型之间可通用的方法或属性，并将它们放进另一个相对更抽象的类型中，是一种很好的代码复用方式，也是多态的一种体现方</description></item><item><title>Rust的Struct和Enum</title><link>https://www.fan-tastic.fun/post/rust_struct_and_enum/</link><pubDate>Sun, 06 Nov 2022 16:45:51 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_struct_and_enum/</guid><description>Struct类型 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 struct Person { name:String, age: u32, email: String, } fn main() { let user = Person { name:&amp;#34;fan-tasitc&amp;#34;.to_string(), age:18, email: &amp;#34;fan-tasitc@xx.com&amp;#34;.to_string(), }; println!(&amp;#34;name: {} age: {}, email: {}&amp;#34;, user.name, user.age, user.email); } 构造 struct 的时候时可以有一些简写</description></item><item><title>Rust所有权</title><link>https://www.fan-tastic.fun/post/rust_ownership_note/</link><pubDate>Thu, 03 Nov 2022 16:47:03 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_ownership_note/</guid><description>Rust所有权系统是保证Rust内存安装的最关键手段之一。 Rust 变量作用域 Rust 中大括号就表示一个单独的作用域。所以常见的大括号作用域有： if，wh</description></item><item><title>Rust笔记----常用数据类型</title><link>https://www.fan-tastic.fun/post/rust_base_data_type_note/</link><pubDate>Tue, 01 Nov 2022 13:59:09 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_base_data_type_note/</guid><description>Rust 是静态类型的语言,即每个值都有确切的数据类型 数值类型 数值类型: 有符号整数 (i8, i16, i32, i64, isize)、 无符号整数 (u8, u16, u32, u64, usize) 、浮点数 (f32, f64)、以及</description></item></channel></rss>