<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on fan-tastic.fun</title><link>https://www.fan-tastic.fun/post/</link><description>Recent content in Posts on fan-tastic.fun</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>by fan-tastic.fun</copyright><lastBuildDate>Tue, 26 Sep 2023 16:11:13 +0800</lastBuildDate><atom:link href="https://www.fan-tastic.fun/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Rust笔记----Axum 写 Middleware</title><link>https://www.fan-tastic.fun/post/axum_write_middleware/</link><pubDate>Tue, 26 Sep 2023 16:11:13 +0800</pubDate><guid>https://www.fan-tastic.fun/post/axum_write_middleware/</guid><description>最近看了 https://www.youtube.com/watch?v=XZtlD_m59sM 关于Rust Axum 开发web的介绍，在代码中有些之前不了解的地方，通过这个笔记进行整理。 Axum Middleware 假设我们目前有如下几个自定义中间件 1 2 3 4</description></item><item><title>Rust笔记----rust并发小实践SQL注入爆破密码</title><link>https://www.fan-tastic.fun/post/rust_concurrency_small_practice/</link><pubDate>Mon, 18 Sep 2023 13:33:18 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_concurrency_small_practice/</guid><description>在一个SQL注入的练习中，需要写一个脚本来获取administrator用户的密码，通过前期的处理，已经知道了密码的位数是20，密码包含0-</description></item><item><title>Rust笔记----tokio中的sync</title><link>https://www.fan-tastic.fun/post/rust_tokio_sync/</link><pubDate>Thu, 31 Aug 2023 13:28:31 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_tokio_sync/</guid><description>tokio::sync模块提供了几种状态同步的机制: Mutex: 互斥锁 RwLock: 读写锁 Notify: 通知唤醒机制 Barrier: 屏障 Semaphore: 信号量 因为tokio是跨线程执行任务的，因此通常会</description></item><item><title>Rust笔记----tokio中的channel</title><link>https://www.fan-tastic.fun/post/rust_tokio_channel/</link><pubDate>Wed, 30 Aug 2023 13:41:20 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_tokio_channel/</guid><description>tokio的异步任务之间主要采用消息传递的通信方式，而消息传递使用的是channel,tokio 提供了几种不同功能的channel: oneshot: 一对一</description></item><item><title>Rust笔记----tokio中的timer</title><link>https://www.fan-tastic.fun/post/rust_tokio_timer/</link><pubDate>Tue, 22 Aug 2023 01:14:13 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_tokio_timer/</guid><description>tokio 的timer模块中的几个概念: Duration类型：是对std::time::Duration的重新导出,两者等价 Instant类型：从程</description></item><item><title>Rust笔记----tokio中的task</title><link>https://www.fan-tastic.fun/post/rust_tokio_task/</link><pubDate>Sun, 20 Aug 2023 18:01:26 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_tokio_task/</guid><description>task: Asynchronous green-threads. Rust中的原生线程(std::thread)是OS线程,每一个原生线程,都对应一个操作系统的线程.green thread则是用户空间</description></item><item><title>Rust笔记----tokio中的runtime</title><link>https://www.fan-tastic.fun/post/rust_tokio_runtime/</link><pubDate>Fri, 11 Aug 2023 10:54:37 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_tokio_runtime/</guid><description>使用tokio 需要先创建异步运行时环境(Runtime),然后在Runtime中执行异步任务. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 use tokio; fn main() { // 创建r</description></item><item><title>Rust笔记----错误处理</title><link>https://www.fan-tastic.fun/post/rust_error/</link><pubDate>Sun, 30 Jul 2023 10:23:02 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_error/</guid><description>关于rust 的错误 rust 有两种不同的错误处理机制: panic 和 Result&amp;lt;T, E&amp;gt; 1 2 3 4 5 6 pub enum Result&amp;lt;T, E&amp;gt; { /// Contains the success value Ok(T), /// Contains the error value Err(E), } Result是Rust提供的一个枚举类</description></item><item><title>Rust笔记----包和模块</title><link>https://www.fan-tastic.fun/post/rust_crate_module/</link><pubDate>Fri, 28 Jul 2023 21:23:42 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_crate_module/</guid><description>包管理 在Rust中最基本的单位是包(crate), Rust包管理器Cargo. 通过cargo new hello --lib创建包 hello, -lib 创建的是库文件. cargo new hello --bin</description></item><item><title>Rust笔记----泛型</title><link>https://www.fan-tastic.fun/post/rust_generic/</link><pubDate>Thu, 27 Jul 2023 22:06:57 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_generic/</guid><description>泛型 是一种参数化多态. 对于Rust来说,在编译阶段，泛型会被替换为它代表的数据类型, 所以一个函数可能会变成多个具体数据类型的函数,这种膨胀会</description></item><item><title>Rust笔记----Trait</title><link>https://www.fan-tastic.fun/post/rust_trait/</link><pubDate>Wed, 26 Jul 2023 21:06:00 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_trait/</guid><description>trait 是 Rust 中的一个非常重要的概念, 在面向对象语言中一般都是叫做接口(interface). trait 是一种方法的集合,或者是一种行为的集合. 在rust中</description></item><item><title>Rust笔记----结构体</title><link>https://www.fan-tastic.fun/post/rust_struct/</link><pubDate>Wed, 26 Jul 2023 17:44:10 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_struct/</guid><description>Rust中有3种结构体类型: named-field结构体,tuple-like结构体,unit-like结构体. 结构体中规范: 结构体的名称需</description></item><item><title>Rust笔记----集合</title><link>https://www.fan-tastic.fun/post/rust_collections/</link><pubDate>Mon, 24 Jul 2023 22:02:04 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_collections/</guid><description>rust中有8个标准的集合,它们全部都是泛型类型. Vec&amp;lt;T&amp;gt; VecDeque&amp;lt;T&amp;gt; LinkedList&amp;lt;T&amp;gt; BinaryHeap&amp;lt;T&amp;gt; HashMap&amp;lt;K, V&amp;gt;和BTreeMap&amp;lt;K, V&amp;gt; HashSet&amp;lt;T&amp;gt;和BT</description></item><item><title>Rust笔记----所有权</title><link>https://www.fan-tastic.fun/post/rust_ownership_note/</link><pubDate>Mon, 24 Jul 2023 08:47:03 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_ownership_note/</guid><description>Rust所有权系统是保证Rust内存安装的最关键手段之一。 Rust 变量作用域 Rust 中大括号就表示一个单独的作用域。常见的大括号作用域有： if，whil</description></item><item><title>Rust笔记----流程控制</title><link>https://www.fan-tastic.fun/post/rust_flow_control/</link><pubDate>Sun, 23 Jul 2023 17:49:29 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_flow_control/</guid><description>rust 中流程控制结构都是表达式,表达式就一定会有值,默认的返回值是单元值(). 条件表达式 if语句的语法如下： 1 2 3 4 5 6 7 if COND1 { ... } else if COND2 { ... }</description></item><item><title>Rust笔记----变量和函数</title><link>https://www.fan-tastic.fun/post/rust_variable_and_function/</link><pubDate>Sun, 23 Jul 2023 15:23:39 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_variable_and_function/</guid><description>Rust的语法中分为:语句和表达式. 表达式主要用于计算求值. 语句分为: 声明语句:如声名变量,函数,结构体等. 表达式语句:特指以分号;结尾的表</description></item><item><title>Rust笔记----原始数据类型</title><link>https://www.fan-tastic.fun/post/rust_base_data_type_note/</link><pubDate>Sat, 22 Jul 2023 13:59:09 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_base_data_type_note/</guid><description>Rust 是静态类型的语言,即每个值都有确切的数据类型 数值类型 有符号整数 (i8, i16, i32, i64, i128) 无符号整数 (u8, u16, u32, u64, u28) 浮点数类型 (f32, f64) 动态大小类型(usize,isi</description></item><item><title>从零搭建Rust语言开发环境</title><link>https://www.fan-tastic.fun/post/rust_install/</link><pubDate>Thu, 20 Jul 2023 22:39:38 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_install/</guid><description>安装Rust 官网地址: https://www.rust-lang.org/learn/get-started 这里Linux环境为例: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 root@iZ2ze7nnhgeigtbnvj4av2Z:~# curl --proto &amp;#39;=https&amp;#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh info:</description></item><item><title>认知觉醒_笔记</title><link>https://www.fan-tastic.fun/post/%E8%AE%A4%E7%9F%A5%E8%A7%89%E9%86%92_%E7%AC%94%E8%AE%B0/</link><pubDate>Tue, 06 Jun 2023 19:16:24 +0800</pubDate><guid>https://www.fan-tastic.fun/post/%E8%AE%A4%E7%9F%A5%E8%A7%89%E9%86%92_%E7%AC%94%E8%AE%B0/</guid><description>保持耐心，坚持做那些短期内看不到效果的“无用之事” 自己总是太急于求成做成某件事情， 忽略底层知识的重要性，盲目的在学习这个技术，学习那个技术，</description></item><item><title>CVE-2021-39165 Cachet SQL注入分析</title><link>https://www.fan-tastic.fun/post/cachet_sql_injection/</link><pubDate>Mon, 08 May 2023 23:24:02 +0800</pubDate><guid>https://www.fan-tastic.fun/post/cachet_sql_injection/</guid><description>文章是通过P师傅的 https://www.leavesongs.com/PENETRATION/cachet-from-laravel-sqli-to-bug-bounty.html 学习 SQL注入的漏洞 环境搭建 Windows + phpstudy Cahcet项目地址：https://github.com/CachetHQ/Cach</description></item><item><title>《Rust Atomics and Locks Low-Level 》阅读笔记1</title><link>https://www.fan-tastic.fun/post/basic_of_rust_concurrency/</link><pubDate>Tue, 18 Apr 2023 14:38:08 +0800</pubDate><guid>https://www.fan-tastic.fun/post/basic_of_rust_concurrency/</guid><description>Threads in Rust 在 Rust 中 可以通过标准库中 std::thread::spawn 创建线程。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 use std::thread; fn main() { thread::spawn(f); thread::spawn(f); println!(&amp;#34;Hello from the main thread.&amp;#34;); } fn f() { println!(&amp;#34;hello from another thread&amp;#34;); let id = thread::current().id(); println!(&amp;#34;This is my thread id:{id:?}&amp;#34;); } 这段代码需要</description></item><item><title>Thinkphp5 SQL注入漏洞分析</title><link>https://www.fan-tastic.fun/post/thinkphp5_sql_injection/</link><pubDate>Fri, 14 Apr 2023 22:41:18 +0800</pubDate><guid>https://www.fan-tastic.fun/post/thinkphp5_sql_injection/</guid><description>环境准备 1 composer create-project --prefer-dist topthink/think=5.0.10 tpdemo 将 composer.json 文件的 require 字段设置成如下： 1 2 3 4 &amp;#34;require&amp;#34;: { &amp;#34;php&amp;#34;: &amp;#34;&amp;gt;=5.4.0&amp;#34;, &amp;#34;topthink/framework&amp;#34;: &amp;#34;5.0.10&amp;#34; } 执行 composer update 创建数据库和表，插入测试数据： 1 2 3 4 5 6 7 8 create database tpdemo; create table users( id int</description></item><item><title>Thinking &amp; Reflecting</title><link>https://www.fan-tastic.fun/post/thinking_and_reflecting/</link><pubDate>Mon, 10 Apr 2023 11:04:05 +0800</pubDate><guid>https://www.fan-tastic.fun/post/thinking_and_reflecting/</guid><description>其实去年自己在很多方面都做了尝试了，在这个过程中发现了自己存在的很多问题，这两天自己做了一些反思和总结。 拖拉 很多时候一些事情其实可以在当下就</description></item><item><title>《无限可能》阅读笔记</title><link>https://www.fan-tastic.fun/post/limitless_read_note/</link><pubDate>Sat, 04 Mar 2023 15:01:59 +0800</pubDate><guid>https://www.fan-tastic.fun/post/limitless_read_note/</guid><description>整体思维导图 四个拦路虎 在我们提升思考能力、专注力、学习能力和成长能力的道路上，存在4个拦路虎： 数字洪流：信息泛滥，让我们不堪重负，焦虑 数字分</description></item><item><title>《Zero To Production In Rust》笔记(二)</title><link>https://www.fan-tastic.fun/post/zero_to_product_in_rust_note2/</link><pubDate>Wed, 01 Feb 2023 20:00:36 +0800</pubDate><guid>https://www.fan-tastic.fun/post/zero_to_product_in_rust_note2/</guid><description>作者在关于这个项目的编写过程应该是目前看到的比较完善的，不管是集成测试，还是写代码的方式，就像作者最开始说： Make a change Compile the application Run tests Run the application 这个过程贯</description></item><item><title>《Zero To Production In Rust》笔记(一) ---- 开发前期准备</title><link>https://www.fan-tastic.fun/post/zero_to_product_in_rust_note1/</link><pubDate>Wed, 01 Feb 2023 14:29:37 +0800</pubDate><guid>https://www.fan-tastic.fun/post/zero_to_product_in_rust_note1/</guid><description>这本书和之前看过的一些书籍不一样，在最开始的部分，从开发流程到常用Rust小工具的说明都写的非常清楚，包括后面的CI持续集成。是可以通过书中</description></item><item><title>由 bunch 的思绪乱飞！</title><link>https://www.fan-tastic.fun/post/bunch_thoughts_flying/</link><pubDate>Mon, 16 Jan 2023 14:34:22 +0800</pubDate><guid>https://www.fan-tastic.fun/post/bunch_thoughts_flying/</guid><description>bunch，一束，看到这个单词想到了电影《花束般的恋爱》，而同时看到朋友圈周围人生活的种种，那么一瞬间想到自己曾对一些人说你应该应该怎么样，</description></item><item><title>2023年读书记录</title><link>https://www.fan-tastic.fun/post/2023_read_book/</link><pubDate>Sun, 01 Jan 2023 21:19:39 +0800</pubDate><guid>https://www.fan-tastic.fun/post/2023_read_book/</guid><description>2023年读书记录 id name author sate date 1 《可能性的艺术》 刘瑜 done 2023-01-09 2 《数据密集型应用系统设计》 Martin Kleppmann ing 3 《必有人重写爱情》 北岛 done 2023-02-26 4 《代码整洁之道》 Robert.C.Martin done 2023-02-13</description></item><item><title>CS61a_lab01</title><link>https://www.fan-tastic.fun/post/cs61a_lab01/</link><pubDate>Sun, 11 Dec 2022 14:29:47 +0800</pubDate><guid>https://www.fan-tastic.fun/post/cs61a_lab01/</guid><description>Although this lab is not difficult, after writing the answer and comparing it with the answer, I found that there is still something to learn.
lab01.1 1 2 3 4 5 6 7 8 9 10 11 12 def falling(n, k): &amp;#34;&amp;#34;&amp;#34;Compute the falling factorial of n to depth k. &amp;gt;&amp;gt;&amp;gt; falling(6, 3) # 6 * 5 * 4 120 &amp;gt;&amp;gt;&amp;gt; falling(4, 3) # 4 * 3 * 2 24 &amp;gt;&amp;gt;&amp;gt; falling(4, 1) # 4 4 &amp;gt;&amp;gt;&amp;gt; falling(4, 0) 1 &amp;#34;&amp;#34;&amp;#34; The code written by this lab itself is indeed more concise than the answer.</description></item><item><title>How to define Function</title><link>https://www.fan-tastic.fun/post/python_function/</link><pubDate>Sat, 10 Dec 2022 19:51:40 +0800</pubDate><guid>https://www.fan-tastic.fun/post/python_function/</guid><description>A Guide to Designing Function Give each function exactly one job, but make it apply to many related situations. Don&amp;rsquo;t repeat yourself(DRY): Implement a process juest once, but execute it many times. Define functions generally. Generalizing Patterns with Arguments 1 2 3 4 5 6 7 8 9 10 11 12 &amp;#34;&amp;#34;&amp;#34;Generalization.&amp;#34;&amp;#34;&amp;#34; from math import pi, sqrt def area_square(r): return r *r def area_circle(r): return r * r * pi def area_hexago(r): return r * r * 3 * sqrt(3) / 2 If we need to make some judgements on r now, maybe we need to add in each function.</description></item><item><title>Rust trait和generic</title><link>https://www.fan-tastic.fun/post/rust_trait_and_generic/</link><pubDate>Sun, 06 Nov 2022 20:25:17 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_trait_and_generic/</guid><description>Trait 从多种数据类型中抽取出这些类型之间可通用的方法或属性，并将它们放进另一个相对更抽象的类型中，是一种很好的代码复用方式，也是多态的一种体现方</description></item><item><title>Rust的Struct和Enum</title><link>https://www.fan-tastic.fun/post/rust_struct_and_enum/</link><pubDate>Sun, 06 Nov 2022 16:45:51 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_struct_and_enum/</guid><description>Struct类型 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 struct Person { name:String, age: u32, email: String, } fn main() { let user = Person { name:&amp;#34;fan-tasitc&amp;#34;.to_string(), age:18, email: &amp;#34;fan-tasitc@xx.com&amp;#34;.to_string(), }; println!(&amp;#34;name: {} age: {}, email: {}&amp;#34;, user.name, user.age, user.email); } 构造 struct 的时候时可以有一些简写</description></item><item><title>《费曼学习法：用输出倒逼输入》读书笔记</title><link>https://www.fan-tastic.fun/post/about_study_methods/</link><pubDate>Sat, 29 Oct 2022 17:31:54 +0800</pubDate><guid>https://www.fan-tastic.fun/post/about_study_methods/</guid><description>从小到大，所有人都告诉我应该有一个正确的学习方法，但是关于如何找到一个正确的，适合自己的学习方法？也许这本书可以给我答案。 学习的本质 当你掌握</description></item><item><title>《不存在的骑士》读书笔记</title><link>https://www.fan-tastic.fun/post/read_the_nonexistent_knight_note/</link><pubDate>Wed, 19 Oct 2022 13:42:38 +0800</pubDate><guid>https://www.fan-tastic.fun/post/read_the_nonexistent_knight_note/</guid><description>《不存在的骑士》 是意大利作家伊塔罗·卡尔维诺 《我们的祖先》三部曲中的其中一部，虽然这本书是是三本中最后一个完成的，但是从阅读的顺序上来说，应</description></item><item><title>PostgresSQL 触发器</title><link>https://www.fan-tastic.fun/post/postgressql_trigger_note_one/</link><pubDate>Sat, 15 Oct 2022 16:21:08 +0800</pubDate><guid>https://www.fan-tastic.fun/post/postgressql_trigger_note_one/</guid><description>触发器是什么 在说触发器是什么之前，很多人可能和我一样，在很多开发资料中，或者和DBA的沟通中，都会不建议使用触发器，在实际业务中使用触发器的</description></item><item><title>First Blog</title><link>https://www.fan-tastic.fun/post/first_blog/</link><pubDate>Sun, 25 Sep 2022 21:48:37 +0800</pubDate><guid>https://www.fan-tastic.fun/post/first_blog/</guid><description>为什么又开始写博客了 说起博客自己真的是折腾来折腾去，从最开始学习Python时用博客园写博客，后来又用过 WordPress，然后又自己用Go</description></item></channel></rss>