<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on fan-tastic.fun</title><link>https://www.fan-tastic.fun/post/</link><description>Recent content in Posts on fan-tastic.fun</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>by fan-tastic.fun</copyright><lastBuildDate>Wed, 01 Feb 2023 20:00:36 +0800</lastBuildDate><atom:link href="https://www.fan-tastic.fun/post/index.xml" rel="self" type="application/rss+xml"/><item><title>《Zero To Production In Rust》笔记(二)</title><link>https://www.fan-tastic.fun/post/zero_to_product_in_rust_note2/</link><pubDate>Wed, 01 Feb 2023 20:00:36 +0800</pubDate><guid>https://www.fan-tastic.fun/post/zero_to_product_in_rust_note2/</guid><description>作者在关于这个项目的编写过程应该是目前看到的比较完善的，不管是集成测试，还是写代码的方式，就像作者最开始说： Make a change Compile the application Run tests Run the application 这个过程贯</description></item><item><title>《Zero To Production In Rust》笔记(一) ---- 开发前期准备</title><link>https://www.fan-tastic.fun/post/zero_to_product_in_rust_note1/</link><pubDate>Wed, 01 Feb 2023 14:29:37 +0800</pubDate><guid>https://www.fan-tastic.fun/post/zero_to_product_in_rust_note1/</guid><description>这本书和之前看过的一些书籍不一样，在最开始的部分，从开发流程到常用Rust小工具的说明都写的非常清楚，包括后面的CI持续集成。是可以通过书中</description></item><item><title>由 bunch 的思绪乱飞！</title><link>https://www.fan-tastic.fun/post/bunch_thoughts_flying/</link><pubDate>Mon, 16 Jan 2023 14:34:22 +0800</pubDate><guid>https://www.fan-tastic.fun/post/bunch_thoughts_flying/</guid><description>bunch，一束，看到这个单词想到了电影《花束般的恋爱》，而同时看到朋友圈周围人生活的种种，那么一瞬间想到自己曾对一些人说你应该应该怎么样，</description></item><item><title>2023年读书记录</title><link>https://www.fan-tastic.fun/post/2023_read_book/</link><pubDate>Sun, 01 Jan 2023 21:19:39 +0800</pubDate><guid>https://www.fan-tastic.fun/post/2023_read_book/</guid><description>2023年读书记录 name author sate date 《可能性的艺术》 刘瑜 done 2023-01-09 《数据密集型应用系统设计》 Martin Kleppmann ing 《必有人重写爱情》 北岛 done 2023-02-26 《代码整洁之道》 Robert.C.Martin done 2023-02-13 《重构：改</description></item><item><title>CS61a_lab01</title><link>https://www.fan-tastic.fun/post/cs61a_lab01/</link><pubDate>Sun, 11 Dec 2022 14:29:47 +0800</pubDate><guid>https://www.fan-tastic.fun/post/cs61a_lab01/</guid><description>Although this lab is not difficult, after writing the answer and comparing it with the answer, I found that there is still something to learn.
lab01.1 1 2 3 4 5 6 7 8 9 10 11 12 def falling(n, k): &amp;#34;&amp;#34;&amp;#34;Compute the falling factorial of n to depth k. &amp;gt;&amp;gt;&amp;gt; falling(6, 3) # 6 * 5 * 4 120 &amp;gt;&amp;gt;&amp;gt; falling(4, 3) # 4 * 3 * 2 24 &amp;gt;&amp;gt;&amp;gt; falling(4, 1) # 4 4 &amp;gt;&amp;gt;&amp;gt; falling(4, 0) 1 &amp;#34;&amp;#34;&amp;#34; The code written by this lab itself is indeed more concise than the answer.</description></item><item><title>How to define Function</title><link>https://www.fan-tastic.fun/post/python_function/</link><pubDate>Sat, 10 Dec 2022 19:51:40 +0800</pubDate><guid>https://www.fan-tastic.fun/post/python_function/</guid><description>A Guide to Designing Function Give each function exactly one job, but make it apply to many related situations. Don&amp;rsquo;t repeat yourself(DRY): Implement a process juest once, but execute it many times. Define functions generally. Generalizing Patterns with Arguments 1 2 3 4 5 6 7 8 9 10 11 12 &amp;#34;&amp;#34;&amp;#34;Generalization.&amp;#34;&amp;#34;&amp;#34; from math import pi, sqrt def area_square(r): return r *r def area_circle(r): return r * r * pi def area_hexago(r): return r * r * 3 * sqrt(3) / 2 If we need to make some judgements on r now, maybe we need to add in each function.</description></item><item><title>Rust trait和generic</title><link>https://www.fan-tastic.fun/post/rust_trait_and_generic/</link><pubDate>Sun, 06 Nov 2022 20:25:17 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_trait_and_generic/</guid><description>Trait 从多种数据类型中抽取出这些类型之间可通用的方法或属性，并将它们放进另一个相对更抽象的类型中，是一种很好的代码复用方式，也是多态的一种体现方</description></item><item><title>Rust的Struct和Enum</title><link>https://www.fan-tastic.fun/post/rust_struct_and_enum/</link><pubDate>Sun, 06 Nov 2022 16:45:51 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_struct_and_enum/</guid><description>Struct类型 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 struct Person { name:String, age: u32, email: String, } fn main() { let user = Person { name:&amp;#34;fan-tasitc&amp;#34;.to_string(), age:18, email: &amp;#34;fan-tasitc@xx.com&amp;#34;.to_string(), }; println!(&amp;#34;name: {} age: {}, email: {}&amp;#34;, user.name, user.age, user.email); } 构造 struct 的时候时可以有一些简写</description></item><item><title>Rust所有权</title><link>https://www.fan-tastic.fun/post/rust_ownership_note/</link><pubDate>Thu, 03 Nov 2022 16:47:03 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_ownership_note/</guid><description>Rust所有权系统是保证Rust内存安装的最关键手段之一。 Rust 变量作用域 Rust 中大括号就表示一个单独的作用域。所以常见的大括号作用域有： if，wh</description></item><item><title>Rust笔记----常用数据类型</title><link>https://www.fan-tastic.fun/post/rust_base_data_type_note/</link><pubDate>Tue, 01 Nov 2022 13:59:09 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_base_data_type_note/</guid><description>Rust 是静态类型的语言,即每个值都有确切的数据类型 数值类型 数值类型: 有符号整数 (i8, i16, i32, i64, isize)、 无符号整数 (u8, u16, u32, u64, usize) 、浮点数 (f32, f64)、以及</description></item><item><title>《费曼学习法：用输出倒逼输入》读书笔记</title><link>https://www.fan-tastic.fun/post/about_study_methods/</link><pubDate>Sat, 29 Oct 2022 17:31:54 +0800</pubDate><guid>https://www.fan-tastic.fun/post/about_study_methods/</guid><description>从小到大，所有人都告诉我应该有一个正确的学习方法，但是关于如何找到一个正确的，适合自己的学习方法？也许这本书可以给我答案。 学习的本质 当你掌握</description></item><item><title>《不存在的骑士》读书笔记</title><link>https://www.fan-tastic.fun/post/read_the_nonexistent_knight_note/</link><pubDate>Wed, 19 Oct 2022 13:42:38 +0800</pubDate><guid>https://www.fan-tastic.fun/post/read_the_nonexistent_knight_note/</guid><description>《不存在的骑士》 是意大利作家伊塔罗·卡尔维诺 《我们的祖先》三部曲中的其中一部，虽然这本书是是三本中最后一个完成的，但是从阅读的顺序上来说，应</description></item><item><title>PostgresSQL 触发器</title><link>https://www.fan-tastic.fun/post/postgressql_trigger_note_one/</link><pubDate>Sat, 15 Oct 2022 16:21:08 +0800</pubDate><guid>https://www.fan-tastic.fun/post/postgressql_trigger_note_one/</guid><description>触发器是什么 在说触发器是什么之前，很多人可能和我一样，在很多开发资料中，或者和DBA的沟通中，都会不建议使用触发器，在实际业务中使用触发器的</description></item><item><title>First Blog</title><link>https://www.fan-tastic.fun/post/first_blog/</link><pubDate>Sun, 25 Sep 2022 21:48:37 +0800</pubDate><guid>https://www.fan-tastic.fun/post/first_blog/</guid><description>为什么又开始写博客了 说起博客自己真的是折腾来折腾去，从最开始学习Python时用博客园写博客，后来又用过 WordPress，然后又自己用Go</description></item></channel></rss>