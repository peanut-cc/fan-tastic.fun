<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rust on fan-tastic.fun</title><link>https://www.fan-tastic.fun/categories/rust/</link><description>Recent content in Rust on fan-tastic.fun</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>by fan-tastic.fun</copyright><lastBuildDate>Wed, 30 Aug 2023 13:41:20 +0800</lastBuildDate><atom:link href="https://www.fan-tastic.fun/categories/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>Rust笔记----tokio中的channel</title><link>https://www.fan-tastic.fun/post/rust_tokio_channel/</link><pubDate>Wed, 30 Aug 2023 13:41:20 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_tokio_channel/</guid><description>tokio的异步任务之间主要采用消息传递的通信方式，而消息传递使用的是channel,tokio 提供了几种不同功能的channel: oneshot: 一对一</description></item><item><title>Rust笔记----tokio中的timer</title><link>https://www.fan-tastic.fun/post/rust_tokio_timer/</link><pubDate>Tue, 22 Aug 2023 01:14:13 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_tokio_timer/</guid><description>tokio 的timer模块中的几个概念: Duration类型：是对std::time::Duration的重新导出,两者等价 Instant类型：从程</description></item><item><title>Rust笔记----tokio中的task</title><link>https://www.fan-tastic.fun/post/rust_tokio_task/</link><pubDate>Sun, 20 Aug 2023 18:01:26 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_tokio_task/</guid><description>task: Asynchronous green-threads. Rust中的原生线程(std::thread)是OS线程,每一个原生线程,都对应一个操作系统的线程.green thread则是用户空间</description></item><item><title>Rust笔记----tokio中的runtime</title><link>https://www.fan-tastic.fun/post/rust_tokio_runtime/</link><pubDate>Fri, 11 Aug 2023 10:54:37 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_tokio_runtime/</guid><description>使用tokio 需要先创建异步运行时环境(Runtime),然后在Runtime中执行异步任务. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 use tokio; fn main() { // 创建r</description></item><item><title>Rust笔记----错误处理</title><link>https://www.fan-tastic.fun/post/rust_error/</link><pubDate>Sun, 30 Jul 2023 10:23:02 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_error/</guid><description>关于rust 的错误 rust 有两种不同的错误处理机制: panic 和 Result&amp;lt;T, E&amp;gt; 1 2 3 4 5 6 pub enum Result&amp;lt;T, E&amp;gt; { /// Contains the success value Ok(T), /// Contains the error value Err(E), } Result是Rust提供的一个枚举类</description></item><item><title>Rust笔记----包和模块</title><link>https://www.fan-tastic.fun/post/rust_crate_module/</link><pubDate>Fri, 28 Jul 2023 21:23:42 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_crate_module/</guid><description>包管理 在Rust中最基本的单位是包(crate), Rust包管理器Cargo. 通过cargo new hello --lib创建包 hello, -lib 创建的是库文件. cargo new hello --bin</description></item><item><title>Rust笔记----泛型</title><link>https://www.fan-tastic.fun/post/rust_generic/</link><pubDate>Thu, 27 Jul 2023 22:06:57 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_generic/</guid><description>泛型 是一种参数化多态. 对于Rust来说,在编译阶段，泛型会被替换为它代表的数据类型, 所以一个函数可能会变成多个具体数据类型的函数,这种膨胀会</description></item><item><title>Rust笔记----Trait</title><link>https://www.fan-tastic.fun/post/rust_trait/</link><pubDate>Wed, 26 Jul 2023 21:06:00 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_trait/</guid><description>trait 是 Rust 中的一个非常重要的概念, 在面向对象语言中一般都是叫做接口(interface). trait 是一种方法的集合,或者是一种行为的集合. 在rust中</description></item><item><title>Rust笔记----结构体</title><link>https://www.fan-tastic.fun/post/rust_struct/</link><pubDate>Wed, 26 Jul 2023 17:44:10 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_struct/</guid><description>Rust中有3种结构体类型: named-field结构体,tuple-like结构体,unit-like结构体. 结构体中规范: 结构体的名称需</description></item><item><title>Rust笔记----集合</title><link>https://www.fan-tastic.fun/post/rust_collections/</link><pubDate>Mon, 24 Jul 2023 22:02:04 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_collections/</guid><description>rust中有8个标准的集合,它们全部都是泛型类型. Vec&amp;lt;T&amp;gt; VecDeque&amp;lt;T&amp;gt; LinkedList&amp;lt;T&amp;gt; BinaryHeap&amp;lt;T&amp;gt; HashMap&amp;lt;K, V&amp;gt;和BTreeMap&amp;lt;K, V&amp;gt; HashSet&amp;lt;T&amp;gt;和BT</description></item><item><title>Rust笔记----所有权</title><link>https://www.fan-tastic.fun/post/rust_ownership_note/</link><pubDate>Mon, 24 Jul 2023 08:47:03 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_ownership_note/</guid><description>Rust所有权系统是保证Rust内存安装的最关键手段之一。 Rust 变量作用域 Rust 中大括号就表示一个单独的作用域。常见的大括号作用域有： if，whil</description></item><item><title>Rust笔记----流程控制</title><link>https://www.fan-tastic.fun/post/rust_flow_control/</link><pubDate>Sun, 23 Jul 2023 17:49:29 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_flow_control/</guid><description>rust 中流程控制结构都是表达式,表达式就一定会有值,默认的返回值是单元值(). 条件表达式 if语句的语法如下： 1 2 3 4 5 6 7 if COND1 { ... } else if COND2 { ... }</description></item><item><title>Rust笔记----变量和函数</title><link>https://www.fan-tastic.fun/post/rust_variable_and_function/</link><pubDate>Sun, 23 Jul 2023 15:23:39 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_variable_and_function/</guid><description>Rust的语法中分为:语句和表达式. 表达式主要用于计算求值. 语句分为: 声明语句:如声名变量,函数,结构体等. 表达式语句:特指以分号;结尾的表</description></item><item><title>Rust笔记----原始数据类型</title><link>https://www.fan-tastic.fun/post/rust_base_data_type_note/</link><pubDate>Sat, 22 Jul 2023 13:59:09 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_base_data_type_note/</guid><description>Rust 是静态类型的语言,即每个值都有确切的数据类型 数值类型 有符号整数 (i8, i16, i32, i64, i128) 无符号整数 (u8, u16, u32, u64, u28) 浮点数类型 (f32, f64) 动态大小类型(usize,isi</description></item><item><title>从零搭建Rust语言开发环境</title><link>https://www.fan-tastic.fun/post/rust_install/</link><pubDate>Thu, 20 Jul 2023 22:39:38 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_install/</guid><description>安装Rust 官网地址: https://www.rust-lang.org/learn/get-started 这里Linux环境为例: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 root@iZ2ze7nnhgeigtbnvj4av2Z:~# curl --proto &amp;#39;=https&amp;#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh info:</description></item><item><title>《Rust Atomics and Locks Low-Level 》阅读笔记1</title><link>https://www.fan-tastic.fun/post/basic_of_rust_concurrency/</link><pubDate>Tue, 18 Apr 2023 14:38:08 +0800</pubDate><guid>https://www.fan-tastic.fun/post/basic_of_rust_concurrency/</guid><description>Threads in Rust 在 Rust 中 可以通过标准库中 std::thread::spawn 创建线程。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 use std::thread; fn main() { thread::spawn(f); thread::spawn(f); println!(&amp;#34;Hello from the main thread.&amp;#34;); } fn f() { println!(&amp;#34;hello from another thread&amp;#34;); let id = thread::current().id(); println!(&amp;#34;This is my thread id:{id:?}&amp;#34;); } 这段代码需要</description></item><item><title>Rust trait和generic</title><link>https://www.fan-tastic.fun/post/rust_trait_and_generic/</link><pubDate>Sun, 06 Nov 2022 20:25:17 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_trait_and_generic/</guid><description>Trait 从多种数据类型中抽取出这些类型之间可通用的方法或属性，并将它们放进另一个相对更抽象的类型中，是一种很好的代码复用方式，也是多态的一种体现方</description></item><item><title>Rust的Struct和Enum</title><link>https://www.fan-tastic.fun/post/rust_struct_and_enum/</link><pubDate>Sun, 06 Nov 2022 16:45:51 +0800</pubDate><guid>https://www.fan-tastic.fun/post/rust_struct_and_enum/</guid><description>Struct类型 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 struct Person { name:String, age: u32, email: String, } fn main() { let user = Person { name:&amp;#34;fan-tasitc&amp;#34;.to_string(), age:18, email: &amp;#34;fan-tasitc@xx.com&amp;#34;.to_string(), }; println!(&amp;#34;name: {} age: {}, email: {}&amp;#34;, user.name, user.age, user.email); } 构造 struct 的时候时可以有一些简写</description></item></channel></rss>